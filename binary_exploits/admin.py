import os.path

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.db import models
from martor.widgets import AdminMartorWidget

from binary_exploits_backend import settings
from .forms import FileFieldForm
from .models import AppUser, Category, Article, Task, Solution, TaskAttachment, TaskLabel


class ArticleInline(admin.StackedInline):
    model = Article


class CategoryAdmin(admin.ModelAdmin):
    inlines = [ArticleInline]
    list_display = ('name', 'description', 'ordinal')
    formfield_overrides = {
        models.TextField: {'widget': AdminMartorWidget},
    }


class SubcategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'category', 'ordinal')


class TaskAdmin(admin.ModelAdmin):
    list_display = ('title', 'ordinal')
    formfield_overrides = {
        models.TextField: {'widget': AdminMartorWidget},
    }


class TaskAttachmentAdmin(admin.ModelAdmin):
    form = FileFieldForm

    def save_model(self, request, obj, form, change):
        files = request.FILES.getlist('file')
        files_num = len(files)
        path_override = form.cleaned_data.get('path_override')

        if change:
            if files_num == 0:  # editing path only
                if not path_override:
                    raise ValueError("Cannot submit empty form")

                fname = os.path.basename(form.initial.get('file').name)
                new_path = os.path.join(settings.MEDIA_ROOT, self.get_new_path(path_override), fname)

                target_dir = os.path.dirname(new_path)
                os.makedirs(target_dir, exist_ok=True)
                os.rename(obj.file.path, new_path)
                obj.file.name = os.path.join(self.get_new_path(path_override), fname).replace("\\", "/")
                obj.save()

            elif files_num == 1:  # editing file or maybe path too
                if path_override:
                    obj.file.field.upload_to = self.get_new_path(path_override)
                else:
                    original_path = form.initial.get('file').name
                    base_path = os.path.dirname(original_path)
                    obj.file.field.upload_to = base_path

                obj.save()
            else:  # cant edit multiple files
                raise ValueError("Updating multiple files is not supported")
        else:
            if files_num == 0:
                raise ValueError("No files selected")

            for f in files:
                instance = TaskAttachment(file=f)

                if path_override:
                    instance.file.field.upload_to = self.get_new_path(path_override)

                instance.save()

    def get_new_path(self, to_append, base_path="attachments/"):
        return os.path.join(base_path, to_append).replace("\\", "/")


admin.site.register(AppUser, UserAdmin)
admin.site.register(Category, CategoryAdmin)
admin.site.register(Article, SubcategoryAdmin)
admin.site.register(Task, TaskAdmin)
admin.site.register(Solution)
admin.site.register(TaskLabel)
admin.site.register(TaskAttachment, TaskAttachmentAdmin)
