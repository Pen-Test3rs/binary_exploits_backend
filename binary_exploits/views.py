from django.contrib.auth import get_user_model
from rest_framework import permissions, mixins, status, viewsets
from rest_framework.generics import CreateAPIView, GenericAPIView
from rest_framework.response import Response
from rest_framework.settings import api_settings
from rest_framework.views import APIView
from functools import reduce

from binary_exploits.models import Category, Subcategory, Task, AppUser, Solution
from binary_exploits.serializers import UserFullSerializer, UserRegisterSerializer, \
    ContentSerializer, TaskSolutionSerializer, UserRatingListSerializer, TaskSerializer, UserSerializer


class UsersListFull(APIView):
    """
    List of users with full data - requires admin.
    """
    permission_classes = [permissions.IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, format=None):
        users = get_user_model().objects.all().order_by('-date_joined')
        serializer = UserFullSerializer(users, many=True, context={'request': request})
        return Response(serializer.data)


class Register(CreateAPIView):
    """
    Register user
    """
    permission_classes = [
        permissions.AllowAny
    ]

    def create(self, request, *args, **kwargs):

        serializer = UserRegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        headers = self.get_success_headers(serializer.data)
        # user = serializer.data
        #
        # token_serializer = UserTokenSerializer(data=request.data)
        # token_serializer.is_valid()
        # tokens = token_serializer.validated_data

        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def get_success_headers(self, data):
        try:
            return {'Location': str(data[api_settings.URL_FIELD_NAME])}
        except (TypeError, KeyError):
            return {}


class MeView(APIView):
    """
    Get basic user data about self.
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, format=None):
        content = UserSerializer(request.user).data
            # 'token': str(request.auth),
        # }
        return Response(content)

    def delete(self, request):
        me : AppUser = get_user_model().objects.get(id=request.user.id)
        me.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class ContentView(GenericAPIView):

    def get(self, request):
        queryset = Category.objects.all()
        serializer = ContentSerializer(queryset, many=True, context={'request': request})
        all = serializer.data
        return Response(all)

class SolutionSend(APIView):

    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        solution_data = TaskSolutionSerializer(data=request.data, context={'request': request})
        if solution_data.is_valid():
            return Response(solution_data.validated_data)
        return Response(solution_data.errors, status=status.HTTP_400_BAD_REQUEST)

class RatingList(APIView):

    def get(self, request):
        users = get_user_model().objects.all()
        serializer = UserRatingListSerializer(users, many=True, context={'request': request})
        users = sorted(serializer.data, key=lambda user: user['points'], reverse=True)
        return Response(users)

class TasksList(GenericAPIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        solved_tasks = [solution.task for solution in Solution.objects.filter(user=request.user, valid=True)]
        tasks = [task for task in Task.objects.all() if reduce((lambda a, b: a and b), [True if (req in solved_tasks) else False for req in task.required_tasks.all()], True)]
        serializer = TaskSerializer(tasks, many=True, context={'request': request})
        return Response(serializer.data)
