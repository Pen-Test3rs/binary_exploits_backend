import json
import os
import uuid

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.core.exceptions import PermissionDenied
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.http import HttpResponse, Http404
from django.utils.translation import ugettext_lazy as _
from martor.utils import LazyEncoder
from rest_framework import permissions, status
from rest_framework.generics import CreateAPIView, GenericAPIView, RetrieveAPIView, ListAPIView
from rest_framework.response import Response
from rest_framework.settings import api_settings
from rest_framework.views import APIView

from binary_exploits.models import Category, Article, Task, AppUser, Solution
from binary_exploits.serializers import UserFullSerializer, UserRegisterSerializer, \
    ContentSerializer, TaskSolutionSerializer, UserRatingListSerializer, TaskSerializer, UserSerializer, \
    ArticleSerializer, TaskListSerializer, ArticlePublicSerializer, UserPublicSerializer, UserUpdateSerializer, \
    ActivitySolutionsSerializer


@login_required
def markdown_uploader(request):
    """
    Makdown image upload for locale storage
    and represent as json to markdown editor.
    """
    if request.method == 'POST' and request.is_ajax():
        if 'markdown-image-upload' in request.FILES:
            image = request.FILES['markdown-image-upload']
            image_types = [
                'image/png', 'image/jpg',
                'image/jpeg', 'image/pjpeg', 'image/gif'
            ]
            if image.content_type not in image_types:
                data = json.dumps({
                    'status': 405,
                    'error': _('Bad image format.')
                }, cls=LazyEncoder)
                return HttpResponse(
                    data, content_type='application/json', status=405)

            if image.size > settings.MAX_IMAGE_UPLOAD_SIZE:
                to_MB = settings.MAX_IMAGE_UPLOAD_SIZE / (1024 * 1024)
                data = json.dumps({
                    'status': 405,
                    'error': _('Maximum image file is %(size) MB.') % {'size': to_MB}
                }, cls=LazyEncoder)
                return HttpResponse(
                    data, content_type='application/json', status=405)

            img_uuid = "{0}-{1}".format(uuid.uuid4().hex[:10], image.name.replace(' ', '-'))
            tmp_file = os.path.join(settings.MARTOR_UPLOAD_PATH, img_uuid)
            def_path = default_storage.save(tmp_file, ContentFile(image.read()))
            img_local_url = os.path.join(settings.MEDIA_RELATIVE_URL, def_path)
            img_url = os.getenv("DOMAIN", "http://127.0.0.1:8000") + str(img_local_url)

            data = json.dumps({
                'status': 200,
                'link': img_url,
                'name': image.name
            })
            return HttpResponse(data, content_type='application/json')
        return HttpResponse(_('Invalid request!'))
    return HttpResponse(_('Invalid request!'))


class UsersListFull(ListAPIView):
    """
    List of users with full data - requires admin.
    """
    permission_classes = [permissions.IsAuthenticated, permissions.IsAdminUser]
    queryset = get_user_model().objects.all().order_by('-date_joined')
    serializer_class = UserFullSerializer


class Register(CreateAPIView):
    """
    Register user
    """
    permission_classes = [permissions.AllowAny]
    model = get_user_model()
    serializer_class = UserRegisterSerializer


class MeView(APIView):
    """
    Get basic user data about self.
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, format=None):
        content = UserSerializer(request.user).data
        return Response(content)

    def put(self, request):
        me: AppUser = get_user_model().objects.get(id=request.user.id)
        if not me.check_password(request.data["oldPassword"]):
            return Response({"oldPassword": "Niepoprawne hasło."}, status=status.HTTP_403_FORBIDDEN)

        serializer = UserUpdateSerializer(data=request.data, context={'uid': request.user.id})
        if serializer.is_valid():
            email = request.data.get('email')
            newPassword = request.data.get('password')
            if email and len(email):
                me.email = email
            if newPassword and len(newPassword):
                me.set_password(newPassword)

            me.save()
            return Response(UserSerializer(get_user_model().objects.get(id=request.user.id)).data,
                            status=status.HTTP_202_ACCEPTED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request):
        me: AppUser = get_user_model().objects.get(id=request.user.id)
        if not me.check_password(request.data["password"]):
            return Response({"password": "Niepoprawne hasło."}, status=status.HTTP_403_FORBIDDEN)

        me.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class UserView(RetrieveAPIView):
    queryset = get_user_model().objects.all()
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = UserPublicSerializer
    lookup_field = 'id'


class RatingList(APIView):
    def get(self, request):
        users = get_user_model().objects.all()
        serializer = UserRatingListSerializer(users, many=True, context={'request': request})
        users = sorted(serializer.data, key=lambda user: user['points'], reverse=True)
        return Response(users)


class LatestActivity(APIView):
    def get(self, request):
        solutions = Solution.objects.all().order_by("-date")[:2]
        serializer = ActivitySolutionsSerializer(solutions, many=True)
        return Response(serializer.data)


class ArticlesList(APIView):
    def get(self, request):
        queryset = Category.objects.all()
        serializer = ContentSerializer(queryset, many=True, context={'request': request})
        all = sorted(serializer.data, key=lambda x: int(x["ordinal"]))
        return Response(all)


class ArticleView(APIView):
    def get(self, request, id):
        try:
            article = Article.objects.get(id=id)
        except Article.DoesNotExist:
            raise Http404
        if request.user.is_authenticated:
            serializer = ArticleSerializer(article, context={'request': request})
        else:
            serializer = ArticlePublicSerializer(article)
        return Response(serializer.data, status=status.HTTP_200_OK)


class TasksList(GenericAPIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        # solved_tasks = [solution.task for solution in Solution.objects.filter(user=request.user, valid=True)]
        # tasks = [task for task in Task.objects.all() if
        #          all([bool(req in solved_tasks) for req in task.required_tasks.all()])]
        tasks = Task.objects.all()
        serializer = TaskListSerializer(tasks, many=True, context={'request': request})
        unlocked_tasks = [task for task in serializer.data if task['status'] != "blocked"]
        unlocked_tasks = sorted(unlocked_tasks, key=lambda x: int(x['ordinal']))
        return Response(unlocked_tasks, status=status.HTTP_200_OK)


class TaskView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get_obj(self, id):
        try:
            return Task.objects.get(id=id)
        except Task.DoesNotExist:
            raise Http404

    def get(self, request, id):
        task = self.get_obj(id=id)
        requirements = task.required_tasks.all()
        if len(requirements) > 0:
            solved_tasks = [solution.task for solution in Solution.objects.filter(user=request.user)]
            for requirement in requirements:
                if requirement not in solved_tasks:
                    raise PermissionDenied()
        serializer = TaskSerializer(task, context={'request': request})
        return Response(serializer.data, status=status.HTTP_200_OK)


class SolutionSend(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        solution_data = TaskSolutionSerializer(data=request.data, context={'request': request})
        if solution_data.is_valid():
            return Response(solution_data.validated_data)
        return Response(solution_data.errors, status=status.HTTP_400_BAD_REQUEST)
