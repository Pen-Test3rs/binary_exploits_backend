import json
import os
import uuid

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.core.exceptions import PermissionDenied
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.http import HttpResponse, Http404
from django.utils.translation import ugettext_lazy as _
from martor.utils import LazyEncoder
from rest_framework import permissions, status
from rest_framework.generics import CreateAPIView, RetrieveAPIView, ListAPIView
from rest_framework.response import Response
from rest_framework.views import APIView

from binary_exploits.models import Category, Article, Task, AppUser, Solution
from binary_exploits.serializers import UserFullSerializer, UserRegisterSerializer, \
    TaskSolutionSerializer, UserRatingListSerializer, TaskSerializer, UserSerializer, \
    ArticleSerializer, TaskListSerializer, ArticlePublicSerializer, UserPublicSerializer, \
    ActivitySolutionsSerializer, ArticleCategorySerializer


@login_required
def markdown_uploader(request):
    """
    Makdown image upload for locale storage
    and represent as json to markdown editor.
    """
    if request.method == 'POST' and request.is_ajax():
        if 'markdown-image-upload' in request.FILES:
            image = request.FILES['markdown-image-upload']
            image_types = [
                'image/png', 'image/jpg',
                'image/jpeg', 'image/pjpeg', 'image/gif'
            ]
            if image.content_type not in image_types:
                data = json.dumps({
                    'status': 405,
                    'error': _('Bad image format.')
                }, cls=LazyEncoder)
                return HttpResponse(
                    data, content_type='application/json', status=405)

            if image.size > settings.MAX_IMAGE_UPLOAD_SIZE:
                to_MB = settings.MAX_IMAGE_UPLOAD_SIZE / (1024 * 1024)
                data = json.dumps({
                    'status': 405,
                    'error': _('Maximum image file is %(size) MB.') % {'size': to_MB}
                }, cls=LazyEncoder)
                return HttpResponse(
                    data, content_type='application/json', status=405)

            img_uuid = "{0}-{1}".format(uuid.uuid4().hex[:10], image.name.replace(' ', '-'))
            tmp_file = os.path.join(settings.MARTOR_UPLOAD_PATH, img_uuid)
            def_path = default_storage.save(tmp_file, ContentFile(image.read()))
            img_local_url = os.path.join(settings.MEDIA_RELATIVE_URL, def_path)
            img_url = os.getenv("DOMAIN", "http://127.0.0.1:8000") + str(img_local_url)

            data = json.dumps({
                'status': 200,
                'link': img_url,
                'name': image.name
            })
            return HttpResponse(data, content_type='application/json')
        return HttpResponse(_('Invalid request!'))
    return HttpResponse(_('Invalid request!'))


class UsersListFull(ListAPIView):
    """
    List of users with full data - requires admin.
    """
    permission_classes = [permissions.IsAuthenticated, permissions.IsAdminUser]
    queryset = get_user_model().objects.all().order_by('-date_joined')
    serializer_class = UserFullSerializer


class Register(CreateAPIView):
    """
    Register user
    """
    permission_classes = [permissions.AllowAny]
    model = get_user_model()
    serializer_class = UserRegisterSerializer


class MeView(APIView):
    """
    Get basic user data about self.
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        content = UserSerializer(request.user).data
        return Response(content)

    def put(self, request):
        me: AppUser = request.user
        if not me.check_password(request.data["oldPassword"]):
            return Response({"oldPassword": "Niepoprawne hasło."}, status=status.HTTP_403_FORBIDDEN)

        email = request.data.get('email')
        newPassword = request.data.get('password')
        if not get_user_model().objects.filter(email=email).exists():
            if email and len(email):
                me.email = email
            if newPassword and len(newPassword):
                me.set_password(newPassword)

            me.save()
            return Response(UserSerializer(me).data, status=status.HTTP_202_ACCEPTED)

        return Response({"email": "Adres e-mail musi być unikalny"}, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request):
        me: AppUser = request.user
        password = request.data["password"]
        if not password or not me.check_password(password):
            return Response({"password": "Niepoprawne hasło."}, status=status.HTTP_403_FORBIDDEN)

        me.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class UserView(RetrieveAPIView):
    queryset = get_user_model().objects.all()
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = UserPublicSerializer
    lookup_field = 'id'


class RatingList(APIView):
    def get(self, request):
        me: AppUser = request.user

        users = get_user_model().objects.raw(
            '''
            select coalesce(sum(bet.points), 0) as points, count(bes.id) as solved, u.id, u.username from binary_exploits_appuser u
            left join binary_exploits_solution bes on u.id = bes.user_id
            left join binary_exploits_task bet on bes.task_id = bet.id
            group by u.id
            order by points desc, solved desc, u.id
            limit 15;
            ''')

        users = UserRatingListSerializer(list(users), many=True).data
        users = sorted(users, key=lambda user: user['points'], reverse=True)[:15]  # TODO: only top X, what about ties?

        # add self to rank if not present
        if me.is_authenticated and not any(u['id'] == me.id for u in users):
            users.append(UserPublicSerializer(me).data)

        return Response(users)


class LatestActivity(ListAPIView):
    queryset = Solution.objects.all().order_by("-date")[:10]
    serializer_class = ActivitySolutionsSerializer


class ArticlesList(ListAPIView):
    queryset = Category.objects.all()
    serializer_class = ArticleCategorySerializer


class ArticleView(RetrieveAPIView):
    queryset = Article.objects.all()
    lookup_field = 'id'

    def get_serializer_class(self):
        if self.request.user.is_authenticated:
            return ArticleSerializer

        return ArticlePublicSerializer

    def get_serializer_context(self):
        context = super(ArticleView, self).get_serializer_context()
        context.update({"request": self.request})
        return context


class TasksList(ListAPIView):
    permission_classes = [permissions.IsAuthenticated]
    queryset = Task.objects.all()
    serializer_class = TaskListSerializer

    def get_serializer_context(self):
        context = super(TasksList, self).get_serializer_context()
        context.update({"request": self.request})
        return context


class TaskView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get_obj(self, id):
        try:
            return Task.objects.get(id=id)
        except Task.DoesNotExist:
            raise Http404

    def get(self, request, id):
        task = self.get_obj(id=id)
        requirements = task.required_tasks.all()
        if len(requirements) > 0:
            solved_tasks = [solution.task for solution in Solution.objects.filter(user=request.user)]
            for requirement in requirements:
                if requirement not in solved_tasks:
                    raise PermissionDenied()
        serializer = TaskSerializer(task, context={'request': request})
        return Response(serializer.data, status=status.HTTP_200_OK)


class SolutionSend(CreateAPIView):
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = TaskSolutionSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.validated_data, status=status.HTTP_201_CREATED)
