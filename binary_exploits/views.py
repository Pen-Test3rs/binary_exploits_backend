from django.contrib.auth import get_user_model
from rest_framework import permissions, mixins, status, viewsets
from rest_framework.generics import CreateAPIView, GenericAPIView
from rest_framework.response import Response
from rest_framework.settings import api_settings
from rest_framework.views import APIView

from binary_exploits.models import Category, Subcategory, Task, AppUser
from binary_exploits.serializers import UserFullSerializer, UserRegisterSerializer, UserTokenSerializer, \
    ContentSerializer, TaskSolutionSerializer, UserRatingListSerializer


class UsersListFull(APIView):
    """
    List of users with full data - requires admin.
    """
    permission_classes = [permissions.IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, format=None):
        users = get_user_model().objects.all().order_by('-date_joined')
        serializer = UserFullSerializer(users, many=True, context={'request': request})
        return Response(serializer.data)


class Register(CreateAPIView):
    """
    Register user
    """
    permission_classes = [
        permissions.AllowAny
    ]

    def create(self, request, *args, **kwargs):

        serializer = UserRegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        headers = self.get_success_headers(serializer.data)
        user = serializer.data

        token_serializer = UserTokenSerializer(data=request.data)
        token_serializer.is_valid()
        tokens = token_serializer.validated_data

        return Response({**user, **tokens}, status=status.HTTP_201_CREATED, headers=headers)

    def get_success_headers(self, data):
        try:
            return {'Location': str(data[api_settings.URL_FIELD_NAME])}
        except (TypeError, KeyError):
            return {}


class MeView(APIView):
    """
    Get basic user data about self.
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, format=None):
        content = {
            **UserRegisterSerializer(request.user).data,
            'token': str(request.auth),
        }
        return Response(content)

    def delete(self, request):
        me : AppUser = get_user_model().objects.get(id=request.user.id)
        me.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class ContentView(GenericAPIView):

    def get(self, request):
        # if self.request.user.is_superuser:
        queryset = Category.objects.all()
        serializer = ContentSerializer(queryset, many=True, context={'request': request})
        all = serializer.data
        return Response(all)
        # elif not self.request.user:
    #
    # serializer_class = AccountSerializer
    #     serializer = UserSerializer(queryset, many=True)
    #     return Response(serializer.data)


class SolutionSend(APIView):

    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        solution_data = TaskSolutionSerializer(data=request.data, context={'request': request})
        if solution_data.is_valid():
            return Response(solution_data.validated_data)

        return Response(solution_data.errors, status=status.HTTP_400_BAD_REQUEST)

class RatingList(APIView):

    def get(self, request):
        users = get_user_model().objects.all()
        serializer = UserRatingListSerializer(users, many=True, context={'request': request})
        users = sorted(serializer.data, key=lambda user: user['points'], reverse=True)
        return Response(users)

