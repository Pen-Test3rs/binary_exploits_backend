from django.contrib.auth import get_user_model, authenticate
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer, login_rule, user_eligible_for_login, \
    PasswordField

from .models import AppUser, Subcategory, Category, Task, Solution
from rest_framework import serializers, exceptions
from rest_framework.validators import UniqueValidator


class UserFullSerializer(serializers.ModelSerializer):
    points = serializers.ReadOnlyField()

    class Meta:
        model = get_user_model()
        fields = "__all__"


class TaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = Task
        exclude = ['flag']
        # fields = '__all__'


class SubcategoryFilterListSerializer(serializers.ListSerializer):
    # Filter subcategories based on previous user solutions
    def to_representation(self, data):
        filtered = []
        if not self.context['request'].user.is_authenticated:
            filtered = data.filter(login_required=False)
        elif self.context['request'].user.is_superuser:
            filtered = data
        else:
            solved_tasks = [solution.task_id for solution in Solution.objects.filter(user=self.context['request'].user.id, valid=True)]
            subcategories = [(subcategory.id,subcategory.task_solution_required.all()) for subcategory in Subcategory.objects.all()]
            ids = []
            for subcategory in subcategories:
                valid = True
                required_tasks = [task.id for task in subcategory[1]]
                for task in required_tasks:
                    if task not in solved_tasks:
                        valid = False
                if valid:
                    ids.append(subcategory[0])
            filtered = data.filter(id__in=ids)
        return super(SubcategoryFilterListSerializer, self).to_representation(filtered)


class SubcategorySerializer(serializers.ModelSerializer):
    tasks = TaskSerializer(many=True, read_only=True)

    class Meta:
        list_serializer_class = SubcategoryFilterListSerializer
        model = Subcategory
        # fields = ['name', 'content', 'tasks']
        exclude = ['login_required', 'task_solution_required']



class ContentSerializer(serializers.ModelSerializer):
    subcategories = SubcategorySerializer(many=True, read_only=True)

    class Meta:
        model = Category
        fields = '__all__'




class UserRegisterSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=AppUser.objects.all())]
    )
    points = serializers.ReadOnlyField()

    password = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = get_user_model()
        fields = ['id', 'username', 'email', 'groups', 'password', 'points']
        extra_kwargs = {
            'email': {'required': True},
        }

    def create(self, validated_data):
        user = AppUser.objects.create(
            username=validated_data['username'],
            email=validated_data['email'],
        )
        user.set_password(validated_data['password'])
        user.save()
        return user



class UserTokenSerializer(TokenObtainPairSerializer):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def validate(self, attrs):
        authenticate_kwargs = {
            self.username_field: attrs[self.username_field],
            'password': attrs['password'],
        }
        user = authenticate(**authenticate_kwargs)

        if not getattr(login_rule, user_eligible_for_login)(user):
            raise exceptions.AuthenticationFailed(
                self.error_messages['no_active_account'],
                'no_active_account',
            )
        refresh = self.get_token(user)
        data = {}
        data['refresh'] = str(refresh)
        data['access'] = str(refresh.access_token)
        return data


class TaskSolutionSerializer(serializers.Serializer):
    id = serializers.IntegerField(required=True)
    flag = serializers.CharField(required=True, max_length=256)

    def validate(self, data):
        if not Task.objects.filter(id=data['id']).exists():
            raise serializers.ValidationError("Invalid task id")
        user = self.context['request'].user

        task = Task.objects.get(id=data['id'])
        valid = False
        if data['flag'] == task.flag:
            valid = True
            if not Solution.objects.filter(user=user, task=task, valid=True).exists():
                solution = Solution.objects.create(user=user, task=task, flag_sent=data['flag'], valid=True)
            else:
                raise serializers.ValidationError("Solution has already been sent")
        else:
            solution = Solution.objects.create(user=user, task=task, flag_sent=data['flag'], valid=False)
        solution.save()
        data['success'] = valid
        return data

class UserRatingListSerializer(serializers.ModelSerializer):
    points = serializers.ReadOnlyField()

    class Meta:
        model = get_user_model()
        fields = ["username", "points"]
