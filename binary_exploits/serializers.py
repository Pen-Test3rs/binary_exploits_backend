from django.contrib.auth import get_user_model, authenticate

from .models import AppUser, Subcategory, Category, Task, Solution
from rest_framework import serializers, exceptions
from rest_framework.validators import UniqueValidator

class TaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = Task
        exclude = ['flag']

class SolutionFilterCorrectListSerializer(serializers.ListSerializer):
    def to_representation(self, data):
        filtered = data.filter(valid=True)
        return super(SolutionFilterCorrectListSerializer, self).to_representation(filtered)

class CorrectSolutionsSerializer(serializers.ModelSerializer):
    task = TaskSerializer(read_only=True)

    class Meta:
        model = Solution
        fields = '__all__'
        list_serializer_class = SolutionFilterCorrectListSerializer


class UserFullSerializer(serializers.ModelSerializer):
    points = serializers.ReadOnlyField()
    place = serializers.ReadOnlyField()

    class Meta:
        model = get_user_model()
        fields = "__all__"


class UserSerializer(serializers.ModelSerializer):
    points = serializers.ReadOnlyField()
    place = serializers.ReadOnlyField()
    solutions = CorrectSolutionsSerializer(many=True, read_only=True)

    class Meta:
        model = get_user_model()
        fields = ['id', 'username', 'email', 'groups', 'date_joined', 'points', 'solutions', 'place']



class SubcategorySerializer(serializers.ModelSerializer):
    class Meta:
        # list_serializer_class = SubcategoryFilterListSerializer
        model = Subcategory
        fields = '__all__'
        # exclude = ['login_required', 'task_solution_required']



class ContentSerializer(serializers.ModelSerializer):
    subcategories = SubcategorySerializer(many=True, read_only=True)
    class Meta:
        model = Category
        fields = '__all__'





class UserRegisterSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=AppUser.objects.all())]
    )
    points = serializers.ReadOnlyField()
    place = serializers.ReadOnlyField()
    solutions = CorrectSolutionsSerializer(many=True, read_only=True)

    password = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = get_user_model()
        fields = ['id', 'username', 'email', 'groups', 'password', 'date_joined', 'points', 'solutions', 'place']
        extra_kwargs = {
            'email': {'required': True},
        }

    def create(self, validated_data):
        user = AppUser.objects.create(
            username=validated_data['username'],
            email=validated_data['email'],
        )
        user.set_password(validated_data['password'])
        user.save()
        return user


class TaskSolutionSerializer(serializers.Serializer):
    id = serializers.IntegerField(required=True)
    flag = serializers.CharField(required=True, max_length=256)

    def validate(self, data):
        if not Task.objects.filter(id=data['id']).exists():
            raise serializers.ValidationError("Invalid task id")
        user = self.context['request'].user

        task = Task.objects.get(id=data['id'])
        valid = False
        if data['flag'] == task.flag:
            valid = True
            if not Solution.objects.filter(user=user, task=task, valid=True).exists():
                solution = Solution.objects.create(user=user, task=task, flag_sent=data['flag'], valid=True)
            else:
                raise serializers.ValidationError("Solution has already been sent")
        else:
            solution = Solution.objects.create(user=user, task=task, flag_sent=data['flag'], valid=False)
        solution.save()
        data['success'] = valid
        return data

class UserRatingListSerializer(serializers.ModelSerializer):
    points = serializers.ReadOnlyField()
    place = serializers.ReadOnlyField()

    class Meta:
        model = get_user_model()
        fields = ["username", "points", "place"]
