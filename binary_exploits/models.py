from django.contrib.auth.models import AbstractUser
from django.db.models import IntegerChoices, Model, IntegerField, CharField, TextField, ForeignKey, ManyToManyField, \
    FileField, DateTimeField, CASCADE

from django.utils.functional import cached_property
from martor.models import MartorField


class AppUser(AbstractUser):
    @cached_property
    def points(self):
        return sum(map(lambda sol: sol.task.points, self.solutions.all()))

    @cached_property
    def solved(self):
        return self.solutions.count()


class Category(Model):
    ordinal = IntegerField(blank=True, default=0, verbose_name='kolejność')
    name = CharField(max_length=256)
    description = TextField(default="", null=True, blank=True)

    class Meta:
        verbose_name = "kategoria"
        verbose_name_plural = "kategorie"

    def __str__(self):
        return f"{self.name}"


class Article(Model):
    ordinal = IntegerField(blank=True, default=0, verbose_name='kolejność')
    category = ForeignKey(Category, on_delete=CASCADE, related_name='articles', verbose_name='kategoria')
    name = CharField(max_length=256, default="", verbose_name='tytuł')
    excerpt = TextField(max_length=256, default="", verbose_name='fragment')
    content = MartorField()
    linked_tasks = ManyToManyField("Task", blank=True, related_name='articles_with_reference')

    class Meta:
        verbose_name = "artykuł"
        verbose_name_plural = "artykuły"

    def __str__(self):
        return f"{self.category.name}/{self.name}"


class TaskLevel(IntegerChoices):
    VERY_EASY = 1, "Bardzo łatwy"
    EASY = 2, "Łatwy"
    MEDIUM = 3, "Średni"
    HARD = 4, "Trudny"
    VERY_HARD = 5, "Bardzo trudny"


class Task(Model):
    title = CharField(max_length=256, default="", verbose_name='tytuł zadania')
    description = MartorField()
    articles = ManyToManyField("Article", blank=True, related_name="tasks_with_reference",
                               verbose_name="artykuły")
    labels = ManyToManyField("TaskLabel", blank=True, related_name="tasks", verbose_name="tagi")
    level = IntegerField(default=TaskLevel.MEDIUM, choices=TaskLevel.choices, verbose_name='poziom trudności')

    address = CharField(max_length=256, verbose_name='adres serwera z zadaniem')
    port = IntegerField()
    points = IntegerField(default=50, verbose_name='punkty')
    flag = CharField(max_length=256)
    required_tasks = ManyToManyField("Task", blank=True, verbose_name='wymagane zadania')
    attachments = ManyToManyField("TaskAttachment", related_name="task", verbose_name='pliki', blank=True)

    class Meta:
        verbose_name = "zadanie"
        verbose_name_plural = "zadania"

    def __str__(self):
        return f"{self.id}: {self.title}"


class TaskAttachment(Model):
    file = FileField(upload_to="attachments/%Y/%m")

    class Meta:
        verbose_name = "załącznik"
        verbose_name_plural = "załączniki"

    def __str__(self):
        return f"{self.file.name}"


class TaskLabel(Model):
    name = CharField(max_length=100, unique=True, verbose_name="nazwa")

    class Meta:
        verbose_name = "tag"
        verbose_name_plural = "tagi"

    def __str__(self):
        return self.name


class Solution(Model):
    user = ForeignKey(AppUser, on_delete=CASCADE, related_name='solutions', verbose_name="użytkownik")
    task = ForeignKey(Task, on_delete=CASCADE, related_name='solutions', verbose_name="zadanie")
    date = DateTimeField(auto_now_add=True, blank=True)

    class Meta:
        verbose_name = "rozwiązanie zadania"
        verbose_name_plural = "rozwiązania zadań"

    def __str__(self):
        return f"{self.user} - [{self.task}]"


class TaskStatusEnum(IntegerChoices):
    OK = 0, 'OK'
    SOLVED = 1, 'Solved'
    BLOCKED = 2, 'Blocked'
