import datetime

from django.contrib.auth.models import AbstractUser
from django.db import models

from django.utils.functional import cached_property


class AppUser(AbstractUser):
    description = models.CharField(default="", blank=True, max_length=256)

    @cached_property
    def points(self):
        try:
            solutions = Solution.objects.filter(user=self, valid=True)
            if not solutions.exists():
                return 0
            sum = 0
            for solution in solutions:
                sum += solution.task.points
            return sum
        except:
            return 0

    @cached_property
    def place(self):
        return len([el for el in AppUser.objects.all() if el.points > self.points])+1

class Category(models.Model):
    name = models.CharField(max_length=256)
    description = models.TextField(default="", null=True, blank=True)

    class Meta:
        verbose_name = "kategoria"
        verbose_name_plural = "kategorie"

    def __str__(self):
        return f"{self.name}"




class Subcategory(models.Model):
    ordinal = models.IntegerField(blank=True, default=0)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='subcategories')
    name = models.CharField(max_length=256, default="")
    content = models.TextField(blank=True)
    # login_required = models.BooleanField(default=False)
    # linked_tasks = models.ManyToManyField("Task", blank=True, related_name='linked_tasks')

    class Meta:
        verbose_name = "artykuł"
        verbose_name_plural = "artykuły"

    def __str__(self):
        return f"{self.category.name}/{self.name}"

class Task(models.Model):
    name_id = models.CharField(max_length=100, unique=True)
    title = models.CharField(max_length=256, default="")
    labels = models.ManyToManyField("TaskLabel", blank=True, related_name="tasks")
    level = models.IntegerField(default=5, )
    description = models.TextField(blank=True)
    address = models.CharField(max_length=256)
    port = models.IntegerField()
    points = models.IntegerField(default=50)
    flag = models.CharField(max_length=256)
    required_tasks = models.ManyToManyField("Task", blank=True, related_name="is_requirement")

    class Meta:
        verbose_name = "zadanie"
        verbose_name_plural = "zadania"

    def __str__(self):
        return f"{self.id}: {self.title}"

class TaskLabel(models.Model):
    name = models.CharField(max_length=100, unique=True)

class Solution(models.Model):
    user = models.ForeignKey(AppUser, on_delete=models.CASCADE, related_name='solutions')
    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='solutions')
    flag_sent = models.CharField(max_length=256)
    valid = models.BooleanField()
    date = models.DateTimeField(auto_now_add=True, blank=True)

    class Meta:
        verbose_name = "próba rozwiązania zadania"
        verbose_name_plural = "próby rozwiązań zadań"

    def __str__(self):
        return f"{self.user} - [{self.task}]: {self.flag_sent} - {self.valid}"